
模块:
模块也就是平时写的一个py，那个py里可以有很多的函数和类

模块导入的搜索路径是从当前的目录一层层的往上翻

导入官方模块的时候(这个时候是不用管导入模块的目录):
    1.去判断当前正在导入的模块是否已经导入过
    2.如果已经导入过,不会重新的导入改模块
    3.如果没有哦导入过,首先开辟一个内存空间
    4.把该模块中的代码放在新开辟的空间中,运行该模块中的代码,所以当被调用模块中有输出语句的话,在调用的py文件中也会输出,那么怎么解决这个问题呢
      把被调用的模块中的输出语句都放在 if __name__=='__main__':下面,这句语句的意思是只有当被调用模块被执行的时候才会去执行这个if下的语句,也就是在
      在执行调用模块时,不会执行if __name__='__main__'下的语句
    5.把该文件的名字作为当前名称空间的名字(前提是没有as)
    6.调用里面的变量,函数,与类的时候,通过模块名.函数等等
模块的导入方法(导入方法的不一样只是会导致调用的方法不一样):   ①import 模块名   eg:导包时import time 用的时候time.localtime()
                                                              ②from *** import ### (eg 导包时from time import localtime 用的时候 localtime() 这里只是导入了模块中的部分功能) 直接###.就行
                                                              ③from *** import *  (eg:导包时from time import * 用的时候 localtime() *代表导入所有,和方法②的用法一样)

注意导入的模块内的东西有重复的话 新导入的会把之前导入的覆盖掉

导入自己定义的模块或者包:
    导入模快的时候:import 模块名(前提是在同一个目录下)
    包就是文件夹,包内可以包含多个文件夹,里面再包含很多的模块
    引用的话 也是 可以用from ***.***.*** import ***
    为了导包方便,启动类一般都放在项目的最外层,放在里面的话,会导致导包复杂


