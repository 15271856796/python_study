import numpy as np

#两个矩阵的加法
a=np.array([10,20,30,40])
print(a[0])                         #10
b=np.arange(4)
print(a,b)                          #[10 20 30 40] [0 1 2 3]
c=a+b
print(c)                            #[10 21 32 43]

#单个矩阵的次幂
c=b**2
print(c)                            #[0 1 4 9]

#矩阵中元素的三角函数运算
c=10*np.sin(a)
print(c)                            #[-5.44021111  9.12945251 -9.88031624  7.4511316 ] 先是计算每个元素的sin值,然后再乘10
print(10*np.cos(a),5*np.tan(a))     #[-8.39071529  4.08082062  1.5425145  -6.66938062] [  3.24180414  11.18580472 -32.02665598  -5.58607465]

#判断矩阵中元素的大小
print(a<15)                          #[ True False False False]


#矩阵的乘法
a=np.array([[1,1],[0,1]])
b=np.arange(4).reshape((2,2))
c=a*b
c_dot=np.dot(a,b)
print(c)                                #[[0 1]    对应元素相乘
                                        #[0 3]]
print(c_dot)                            #[[2 4]     向量的相乘
                                        #[2 3]]


c_dot_2=a.dot(b)                        #和np.dot(a,b)效果一样


#矩阵中的最大值最小值已经求和
a=np.random.random((2,4))           #[[0.17779292 0.36954652 0.13461326 0.74485924]
                                    #[0.07219428 0.92953824 0.97493989 0.22234979]]
print(a)

np.sum(a)                           #a中所有元素的和
np.min(a)                           #a中所有元素中的最小值
np.max(a)                           #a中所有元素中的最大值


#在矩阵的所有运算中,都可以指定是对行操作还是列操作
print(np.sum(a,axis=1))                    #axis=1是指在行中求和  [1.42681194 2.1990222 ]
print(np.min(a,axis=0))                    #axis=0是指在列中求最小值 [0.07219428 0.36954652 0.13461326 0.22234979]
print(np.max(a,axis=1))                    #axis=1是指在行中求最大值 [0.74485924 0.97493989]


#找到对应索引
a=np.arange(2,14).reshape((3,4))            #a=[[2,3,4,5],[6,7,8,9],[10,11,12,13]]
print(a[1][1])                              #7
np.argmin(a)
print(np.argmax(a))             #11


#求元素平均值
print(a.mean())                 #7.5
print(np.mean(a))               #7.5与上面的用法一样

#求中位数
print(np.median(a))             #7.5

#前序和
print(np.cumsum(a))             #[ 2  5  9 14 20 27 35 44 54 65 77 90]

#相邻差
print(np.diff(a))                #[[1 1 1]    3减2,4减3,5减4
                                 #[1 1 1]
                                 #[1 1 1]]

#找出非零元素
print(np.nonzero(a))              #(array([0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2], dtype=int64), array([0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3], dtype=int64))
                                  # 前面的array和后面的array组合,前面的array代表是行,后面array代表是列,刚好组合出12个
                                  # 即(0,0)(0,1)等等不是0元素

#矩阵排序,按行排序
print(np.sort(a))                  #[[ 2  3  4  5]
                                   #[ 6  7  8  9]
                                    #[10 11 12 13]]

#矩阵的转置
print(np.transpose(a))              #[[ 2  6 10]
                                    #[ 3  7 11]
                                    #[ 4  8 12]
                                    #[ 5  9 13]]


#矩阵的改变,下面的意思是所有小于5的元素都换成5,所有大于9的元素,都换成9,在5到9之间的保持原型
print(np.clip(a,5,9))                                   #[[5 5 5 5]
                                                        #[6 7 8 9]
                                                        #[9 9 9 9]]



